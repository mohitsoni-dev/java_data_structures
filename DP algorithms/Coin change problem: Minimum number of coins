/*
Given a value V and array coins[] of size M, the task is to make the change 	for V cents, given that you have an infinite supply of each of coins{coins1, coins2, ..., coinsm} valued coins. Find the minimum number of coins to make the change. If not possible to make change then output -1

Input: V = 30, M = 3, coins[] = {25, 10, 5}
Output: 2
Explanation: Use one 25 cent coin
and one 5 cent coin
 */

class Solution {
	public int minCoins(int coins[], int M, int V) { 
	    int[][] dp = new int[M+1][V+1];
	    
	    for (int i = 0; i < V+1; i++) {
	        dp[0][i] = Integer.MAX_VALUE - 1;
	        if (i == 0) continue;
	        dp[1][i] = (i % coins[0] == 0) ? i/coins[0] : Integer.MAX_VALUE - 1;
	    }
	    
	    for (int i = 1; i < M+1; i++) {
	        dp[i][0] = 0;
	    }
	    
	    for (int i = 2; i < M+1; i++) {
	        for (int j = 1; j < V+1; j++) {
	            if (coins[i-1] <= j) {
	                dp[i][j] = Math.min(1+dp[i][j-coins[i-1]], dp[i-1][j]);
	            } else {
	                dp[i][j] = dp[i-1][j];
	            }
	        }
	    }
	    
	    return dp[M][V] >= Integer.MAX_VALUE - 1 ? -1 : dp[M][V];
	} 
}
